--- a/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
+++ b/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
@@ -63,7 +_,7 @@
 import org.slf4j.Logger;
 
 public class ChunkSerializer {
-   private static final Codec<PalettedContainer<BlockState>> f_188227_ = PalettedContainer.m_238371_(Block.f_49791_, BlockState.f_61039_, PalettedContainer.Strategy.f_188137_, Blocks.f_50016_.m_49966_());
+   public static final Codec<PalettedContainer<BlockState>> f_188227_ = PalettedContainer.m_238371_(Block.f_49791_, BlockState.f_61039_, PalettedContainer.Strategy.f_188137_, Blocks.f_50016_.m_49966_()); // CraftBukkit - read/write
    private static final Logger f_63449_ = LogUtils.getLogger();
    private static final String f_156511_ = "UpgradeData";
    private static final String f_188228_ = "block_ticks";
@@ -78,9 +_,6 @@
 
    public static ProtoChunk m_188230_(ServerLevel p_188231_, PoiManager p_188232_, ChunkPos p_188233_, CompoundTag p_188234_) {
       ChunkPos chunkpos = new ChunkPos(p_188234_.m_128451_("xPos"), p_188234_.m_128451_("zPos"));
-      if (!Objects.equals(p_188233_, chunkpos)) {
-         f_63449_.error("Chunk file at {} is in the wrong location; relocating. (Expected {}, got {})", p_188233_, p_188233_, chunkpos);
-      }
 
       UpgradeData upgradedata = p_188234_.m_128425_("UpgradeData", 10) ? new UpgradeData(p_188234_.m_128469_("UpgradeData"), p_188231_) : UpgradeData.f_63320_;
       boolean flag = p_188234_.m_128471_("isLightOn");
@@ -108,9 +_,9 @@
                palettedcontainer = new PalettedContainer<>(Block.f_49791_, Blocks.f_50016_.m_49966_(), PalettedContainer.Strategy.f_188137_);
             }
 
-            PalettedContainerRO<Holder<Biome>> palettedcontainerro;
+            PalettedContainer<Holder<Biome>> palettedcontainerro; // CraftBukkit - read/write
             if (compoundtag.m_128425_("biomes", 10)) {
-               palettedcontainerro = codec.parse(NbtOps.f_128958_, compoundtag.m_128469_("biomes")).promotePartial((p_188274_) -> {
+               palettedcontainerro = (PalettedContainer<Holder<Biome>>) codec.parse(NbtOps.f_128958_, compoundtag.m_128469_("biomes")).promotePartial((p_188274_) -> {
                   m_188239_(p_188233_, k, p_188274_);
                }).getOrThrow(false, f_63449_::error);
             } else {
@@ -159,6 +_,7 @@
             return BuiltInRegistries.f_257020_.m_6612_(ResourceLocation.m_135820_(p_258990_));
          }, p_188233_);
          chunkaccess = new LevelChunk(p_188231_.m_6018_(), p_188233_, upgradedata, levelchunkticks, levelchunkticks1, k1, alevelchunksection, m_196890_(p_188231_, p_188234_), blendingdata);
+         if (p_188234_.m_128441_("ForgeCaps")) ((LevelChunk)chunkaccess).readCapsFromNBT(p_188234_.m_128469_("ForgeCaps"));
       } else {
          ProtoChunkTicks<Block> protochunkticks = ProtoChunkTicks.m_193302_(p_188234_.m_128437_("block_ticks", 10), (p_258992_) -> {
             return BuiltInRegistries.f_256975_.m_6612_(ResourceLocation.m_135820_(p_258992_));
@@ -180,6 +_,12 @@
          }
       }
 
+      // CraftBukkit start - load chunk persistent data from nbt - SPIGOT-6814: Already load PDC here to account for 1.17 to 1.18 chunk upgrading.
+      net.minecraft.nbt.Tag persistentBase = p_188234_.m_128423_("ChunkBukkitValues");
+      if (persistentBase instanceof CompoundTag) {
+         ((ChunkAccess) chunkaccess).persistentDataContainer.putAll((CompoundTag) persistentBase);
+      }
+      // CraftBukkit end
       chunkaccess.m_8094_(flag);
       CompoundTag compoundtag2 = p_188234_.m_128469_("Heightmaps");
       EnumSet<Heightmap.Types> enumset = EnumSet.noneOf(Heightmap.Types.class);
@@ -212,6 +_,7 @@
       }
 
       if (chunkstatus$chunktype == ChunkStatus.ChunkType.LEVELCHUNK) {
+         net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.level.ChunkDataEvent.Load(chunkaccess, p_188234_, chunkstatus$chunktype));
          return new ImposterProtoChunk((LevelChunk)chunkaccess, false);
       } else {
          ProtoChunk protochunk1 = (ProtoChunk)chunkaccess;
@@ -235,6 +_,7 @@
             protochunk1.m_188186_(generationstep$carving, new CarvingMask(compoundtag4.m_128467_(s1), chunkaccess.m_141937_()));
          }
 
+         net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.level.ChunkDataEvent.Load(chunkaccess, p_188234_, chunkstatus$chunktype));
          return protochunk1;
       }
    }
@@ -247,6 +_,12 @@
       return PalettedContainer.m_238418_(p_188261_.m_206115_(), p_188261_.m_206110_(), PalettedContainer.Strategy.f_188138_, p_188261_.m_246971_(Biomes.f_48202_));
    }
 
+   // CraftBukkit start - read/write
+   private static Codec<PalettedContainer<Holder<Biome>>> makeBiomeCodecRW(Registry<Biome> iregistry) {
+      return PalettedContainer.m_238371_(iregistry.m_206115_(), iregistry.m_206110_(), PalettedContainer.Strategy.f_188138_, iregistry.m_246971_(Biomes.f_48202_));
+   }
+   // CraftBukkit end
+
    public static CompoundTag m_63454_(ServerLevel p_63455_, ChunkAccess p_63456_) {
       ChunkPos chunkpos = p_63456_.m_7697_();
       CompoundTag compoundtag = NbtUtils.m_264171_(new CompoundTag());
@@ -341,6 +_,14 @@
 
          compoundtag.m_128365_("CarvingMasks", compoundtag4);
       }
+      else if (p_63456_ instanceof LevelChunk levelChunk){
+          try {
+              final CompoundTag capTag = levelChunk.writeCapsToNBT();
+              if (capTag != null) compoundtag.m_128365_("ForgeCaps", capTag);
+          } catch (Exception exception) {
+              f_63449_.error("A capability provider has thrown an exception trying to write state. It will not persist. Report this to the mod author", exception);
+          }
+      }
 
       m_188235_(p_63455_, compoundtag, p_63456_.m_183568_());
       compoundtag.m_128365_("PostProcessing", m_63490_(p_63456_.m_6720_()));
@@ -354,6 +_,11 @@
 
       compoundtag.m_128365_("Heightmaps", compoundtag2);
       compoundtag.m_128365_("structures", m_188249_(StructurePieceSerializationContext.m_192770_(p_63455_), chunkpos, p_63456_.m_6633_(), p_63456_.m_62769_()));
+      // CraftBukkit start - store chunk persistent data in nbt
+      if (!p_63456_.persistentDataContainer.isEmpty()) { // SPIGOT-6814: Always save PDC to account for 1.17 to 1.18 chunk upgrading.
+         compoundtag.m_128365_("ChunkBukkitValues", p_63456_.persistentDataContainer.toTagCompound());
+      }
+      // CraftBukkit end
       return compoundtag;
    }
 
