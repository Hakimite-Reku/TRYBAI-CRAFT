--- a/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
@@ -1,6 +_,10 @@
 package net.minecraft.server.network;
 
 import com.google.common.primitives.Ints;
+import com.mohistmc.MohistConfig;
+import com.mohistmc.bukkit.LoginHandler;
+import com.mohistmc.paper.proxy.VelocityProxy;
+import com.mohistmc.plugins.PlayerModsCheck;
 import com.mojang.authlib.GameProfile;
 import com.mojang.authlib.exceptions.AuthenticationUnavailableException;
 import com.mojang.logging.LogUtils;
@@ -43,15 +_,16 @@
    private static final int f_143698_ = 600;
    private static final RandomSource f_10016_ = RandomSource.m_216327_();
    private final byte[] f_252396_;
-   final MinecraftServer f_10018_;
-   final Connection f_10013_;
-   ServerLoginPacketListenerImpl.State f_10019_ = ServerLoginPacketListenerImpl.State.HELLO;
+   public final MinecraftServer f_10018_;
+   public final Connection f_10013_;
+   public ServerLoginPacketListenerImpl.State f_10019_ = ServerLoginPacketListenerImpl.State.HELLO;
    private int f_10020_;
    @Nullable
    public GameProfile f_10021_;
    private final String f_10022_ = "";
    @Nullable
    private ServerPlayer f_10024_;
+   public int velocityLoginMessageId = -1; // Paper - Velocity support
 
    public ServerLoginPacketListenerImpl(MinecraftServer p_10027_, Connection p_10028_) {
       this.f_10018_ = p_10027_;
@@ -60,7 +_,13 @@
    }
 
    public void m_9933_() {
-      if (this.f_10019_ == ServerLoginPacketListenerImpl.State.READY_TO_ACCEPT) {
+      if (this.f_10019_ == State.NEGOTIATING) {
+         // We force the state into "NEGOTIATING" which is otherwise unused. Once we're completed we move the negotiation onto "READY_TO_ACCEPT"
+         // Might want to promote player object creation to here as well..
+         boolean negotiationComplete = net.minecraftforge.network.NetworkHooks.tickNegotiation(this, this.f_10013_, this.f_10024_);
+         if (negotiationComplete)
+            this.f_10019_ = State.READY_TO_ACCEPT;
+      } else if (this.f_10019_ == ServerLoginPacketListenerImpl.State.READY_TO_ACCEPT) {
          this.m_10055_();
       } else if (this.f_10019_ == ServerLoginPacketListenerImpl.State.DELAY_ACCEPT) {
          ServerPlayer serverplayer = this.f_10018_.m_6846_().m_11259_(this.f_10021_.getId());
@@ -83,7 +_,7 @@
 
    public void m_10053_(Component p_10054_) {
       try {
-         f_10015_.info("Disconnecting {}: {}", this.m_10056_(), p_10054_.getString());
+         if (PlayerModsCheck.canLog(false)) f_10015_.info("Disconnecting {}: {}", this.m_10056_(), p_10054_.getString());
          this.f_10013_.m_129512_(new ClientboundLoginDisconnectPacket(p_10054_));
          this.f_10013_.m_129507_(p_10054_);
       } catch (Exception exception) {
@@ -92,11 +_,43 @@
 
    }
 
+   // CraftBukkit start
+   public void disconnect(String s) {
+      m_10053_(Component.m_237113_(s));
+   }
+   // CraftBukkit end
+
+   // Spigot start
+   public void initUUID()
+   {
+      UUID uuid;
+      if ( f_10013_.spoofedUUID != null )
+      {
+         uuid = f_10013_.spoofedUUID;
+      } else
+      {
+         uuid =  UUIDUtil.m_235879_( this.f_10021_.getName() );
+      }
+
+      this.f_10021_ = new GameProfile( uuid, this.f_10021_.getName() );
+
+      if (f_10013_.spoofedProfile != null)
+      {
+         for ( com.mojang.authlib.properties.Property property : f_10013_.spoofedProfile )
+         {
+            if (!ServerHandshakePacketListenerImpl.PROP_PATTERN.matcher(property.getName()).matches()) continue;
+            this.f_10021_.getProperties().put( property.getName(), property );
+         }
+      }
+   }
+   // Spigot end
+
    public void m_10055_() {
       if (!this.f_10021_.isComplete()) {
-         this.f_10021_ = this.m_10038_(this.f_10021_);
+         // this.gameProfile = this.createFakeProfile(this.gameProfile); // Spigot - Moved to initUUID
       }
 
+      this.f_10018_.m_6846_().mohist$putHandler(this);
       Component component = this.f_10018_.m_6846_().m_6418_(this.f_10013_.m_129523_(), this.f_10021_);
       if (component != null) {
          this.m_10053_(component);
@@ -134,31 +_,67 @@
    }
 
    public void m_7026_(Component p_10043_) {
-      f_10015_.info("{} lost connection: {}", this.m_10056_(), p_10043_.getString());
+      if (PlayerModsCheck.canLog(true)) f_10015_.info("{} lost connection: {}", this.m_10056_(), p_10043_.getString());
    }
 
    public String m_10056_() {
-      return this.f_10021_ != null ? this.f_10021_ + " (" + this.f_10013_.m_129523_() + ")" : String.valueOf((Object)this.f_10013_.m_129523_());
+      final String addressString = net.minecraftforge.network.DualStackUtils.getAddressString(this.f_10013_.m_129523_());
+      return this.f_10021_ != null ? this.f_10021_ + " (" + addressString + ")" : addressString;
    }
 
    public void m_5990_(ServerboundHelloPacket p_10047_) {
       Validate.validState(this.f_10019_ == ServerLoginPacketListenerImpl.State.HELLO, "Unexpected hello packet");
-      Validate.validState(m_203792_(p_10047_.f_238040_()), "Invalid characters in username");
+      // Validate.validState(isValidUsername(pPacket.name()), "Invalid characters in username"); // Mohist Chinese and other special characters are allowed
       GameProfile gameprofile = this.f_10018_.m_236731_();
       if (gameprofile != null && p_10047_.f_238040_().equalsIgnoreCase(gameprofile.getName())) {
          this.f_10021_ = gameprofile;
-         this.f_10019_ = ServerLoginPacketListenerImpl.State.READY_TO_ACCEPT;
+         this.f_10019_ = ServerLoginPacketListenerImpl.State.NEGOTIATING; // FORGE: continue NEGOTIATING, we move to READY_TO_ACCEPT after Forge is ready
       } else {
          this.f_10021_ = new GameProfile((UUID)null, p_10047_.f_238040_());
          if (this.f_10018_.m_129797_() && !this.f_10013_.m_129531_()) {
             this.f_10019_ = ServerLoginPacketListenerImpl.State.KEY;
             this.f_10013_.m_129512_(new ClientboundHelloPacket("", this.f_10018_.m_129790_().getPublic().getEncoded(), this.f_252396_));
          } else {
-            this.f_10019_ = ServerLoginPacketListenerImpl.State.READY_TO_ACCEPT;
+            // Paper start - Velocity support
+            if (MohistConfig.velocity_enabled) {
+               this.velocityLoginMessageId = java.util.concurrent.ThreadLocalRandom.current().nextInt();
+               net.minecraft.network.FriendlyByteBuf buf = new net.minecraft.network.FriendlyByteBuf(io.netty.buffer.Unpooled.buffer());
+               buf.writeByte(VelocityProxy.MAX_SUPPORTED_FORWARDING_VERSION);
+               net.minecraft.network.protocol.login.ClientboundCustomQueryPacket packet1 = new net.minecraft.network.protocol.login.ClientboundCustomQueryPacket(this.velocityLoginMessageId, VelocityProxy.PLAYER_INFO_CHANNEL, buf);
+               this.f_10013_.m_129512_(packet1);
+               return;
+            }
+            // Paper end
+            // Spigot start
+            // Paper start - Cache authenticator threads
+            authenticatorPool.execute(() -> {
+               try {
+                  this.initUUID();
+                  new LoginHandler().fireEvents(this);
+               } catch (Exception ex) {
+                  this.disconnect("Failed to verify username!");
+                  f_10018_.server.getLogger().log(java.util.logging.Level.WARNING, "Exception verifying " + this.f_10021_.getName(), ex);
+               }
+            });
+            // Paper end
+            // Spigot end
          }
 
       }
    }
+
+   // Paper start - Cache authenticator threads
+   private static final AtomicInteger threadId = new AtomicInteger(0);
+   private static final java.util.concurrent.ExecutorService authenticatorPool = java.util.concurrent.Executors.newCachedThreadPool(
+           r -> {
+              Thread ret = new Thread(r, "User Authenticator #" + threadId.incrementAndGet());
+
+              ret.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(f_10015_));
+
+              return ret;
+           }
+   );
+   // Paper end
 
    public static boolean m_203792_(String p_203793_) {
       return p_203793_.chars().filter((p_203791_) -> {
@@ -186,19 +_,23 @@
          throw new IllegalStateException("Protocol error", cryptexception);
       }
 
-      Thread thread = new Thread("User Authenticator #" + f_10014_.incrementAndGet()) {
+      Thread thread = new Thread(net.minecraftforge.fml.util.thread.SidedThreadGroups.SERVER, "User Authenticator #" + f_10014_.incrementAndGet()) {
          public void run() {
             GameProfile gameprofile = ServerLoginPacketListenerImpl.this.f_10021_;
 
             try {
                ServerLoginPacketListenerImpl.this.f_10021_ = ServerLoginPacketListenerImpl.this.f_10018_.m_129925_().hasJoinedServer(new GameProfile((UUID)null, gameprofile.getName()), s, this.m_10064_());
                if (ServerLoginPacketListenerImpl.this.f_10021_ != null) {
-                  ServerLoginPacketListenerImpl.f_10015_.info("UUID of player {} is {}", ServerLoginPacketListenerImpl.this.f_10021_.getName(), ServerLoginPacketListenerImpl.this.f_10021_.getId());
-                  ServerLoginPacketListenerImpl.this.f_10019_ = ServerLoginPacketListenerImpl.State.READY_TO_ACCEPT;
+                  // CraftBukkit start - fire PlayerPreLoginEvent
+                  if (!ServerLoginPacketListenerImpl.this.f_10013_.m_129536_()) {
+                     return;
+                  }
+
+                  new LoginHandler().fireEvents(ServerLoginPacketListenerImpl.this);
                } else if (ServerLoginPacketListenerImpl.this.f_10018_.m_129792_()) {
                   ServerLoginPacketListenerImpl.f_10015_.warn("Failed to verify username but will let them in anyway!");
                   ServerLoginPacketListenerImpl.this.f_10021_ = gameprofile;
-                  ServerLoginPacketListenerImpl.this.f_10019_ = ServerLoginPacketListenerImpl.State.READY_TO_ACCEPT;
+                  ServerLoginPacketListenerImpl.this.f_10019_ = ServerLoginPacketListenerImpl.State.NEGOTIATING; // FORGE: continue NEGOTIATING, we move to READY_TO_ACCEPT after Forge is ready
                } else {
                   ServerLoginPacketListenerImpl.this.m_10053_(Component.m_237115_("multiplayer.disconnect.unverified_username"));
                   ServerLoginPacketListenerImpl.f_10015_.error("Username '{}' tried to join with an invalid session", (Object)gameprofile.getName());
@@ -207,11 +_,15 @@
                if (ServerLoginPacketListenerImpl.this.f_10018_.m_129792_()) {
                   ServerLoginPacketListenerImpl.f_10015_.warn("Authentication servers are down but will let them in anyway!");
                   ServerLoginPacketListenerImpl.this.f_10021_ = gameprofile;
-                  ServerLoginPacketListenerImpl.this.f_10019_ = ServerLoginPacketListenerImpl.State.READY_TO_ACCEPT;
+                  ServerLoginPacketListenerImpl.this.f_10019_ = ServerLoginPacketListenerImpl.State.NEGOTIATING; // FORGE: continue NEGOTIATING, we move to READY_TO_ACCEPT after Forge is ready
                } else {
                   ServerLoginPacketListenerImpl.this.m_10053_(Component.m_237115_("multiplayer.disconnect.authservers_down"));
                   ServerLoginPacketListenerImpl.f_10015_.error("Couldn't verify username because servers are unavailable");
                }
+            } catch (Exception exception) {
+               ServerLoginPacketListenerImpl.this.disconnect("Failed to verify username!");
+               f_10018_.server.getLogger().log(java.util.logging.Level.WARNING, "Exception verifying " + gameprofile.getName(), exception);
+               // CraftBukkit end
             }
 
          }
@@ -227,6 +_,48 @@
    }
 
    public void m_7223_(ServerboundCustomQueryPacket p_10045_) {
+      // Paper start - Velocity support
+      if (MohistConfig.velocity_enabled && p_10045_.m_179824_() == this.velocityLoginMessageId) {
+         net.minecraft.network.FriendlyByteBuf buf = p_10045_.m_179825_();
+         if (buf == null) {
+            this.disconnect("This server requires you to connect with Velocity.");
+            return;
+         }
+
+         if (!VelocityProxy.checkIntegrity(buf)) {
+            this.disconnect("Unable to verify player details");
+            return;
+         }
+
+         int version = buf.m_130242_();
+         if (version > VelocityProxy.MAX_SUPPORTED_FORWARDING_VERSION) {
+            throw new IllegalStateException("Unsupported forwarding version " + version + ", wanted upto " + VelocityProxy.MAX_SUPPORTED_FORWARDING_VERSION);
+         }
+
+         java.net.SocketAddress listening = this.f_10013_.m_129523_();
+         int port = 0;
+         if (listening instanceof java.net.InetSocketAddress) {
+            port = ((java.net.InetSocketAddress) listening).getPort();
+         }
+         this.f_10013_.f_129469_ = new java.net.InetSocketAddress(VelocityProxy.readAddress(buf), port);
+
+         this.f_10021_ = VelocityProxy.createProfile(buf);
+
+         //TODO Update handling for lazy sessions, might not even have to do anything?
+
+         // Proceed with login
+         authenticatorPool.execute(() -> {
+            try {
+               new LoginHandler().fireEvents(this);
+            } catch (Exception ex) {
+               disconnect("Failed to verify username!");
+               f_10018_.server.getLogger().log(java.util.logging.Level.WARNING, "Exception verifying " + f_10021_.getName(), ex);
+            }
+         });
+         return;
+      }
+      // Paper end
+      if (!net.minecraftforge.network.NetworkHooks.onCustomPayload(p_10045_, this.f_10013_))
       this.m_10053_(Component.m_237115_("multiplayer.disconnect.unexpected_query_response"));
    }
 
@@ -235,7 +_,7 @@
       return new GameProfile(uuid, p_10039_.getName());
    }
 
-   static enum State {
+   public static enum State {
       HELLO,
       KEY,
       AUTHENTICATING,
